.. _qat_2.0_qatengine_special_features:

Intel® QAT OpenSSL* Engine Special Features
===========================================

Hardware Acceleration (QAT_HW)
-------------------------------------

.. _qat_2.0_qatengine_features_asynchronous_mode:

Using the OpenSSL* asynchronous mode *ASYNC_JOB* infrastructure
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Asynchronous operation utilizes the OpenSSL* asychronous mode (*ASYNC_JOB* infrastructure) introduced in OpenSSL* version 1.1.0. 
In the OpenSSL* master branch this infrastructure was augmented to provide an additional callback method by which the OpenSSL* Engine 
can be notified of crypto operation request completions by the hardware accelerator. This additional method can be used if you think 
that using the alternative file descriptor method descriptor is too costly in terms of CPU cycles or in some context where a file 
descriptor is not appropriate.

The Intel® QAT OpenSSL* Engine build system will automatically detect whether the OpenSSL* version being built against supports this 
additional callback method. If so, the Intel® QAT OpenSSL* Engine code will use the callback mechanism for job completion rather than 
the file descriptor mechanism if a callback function has been set. If a callback has not been set then the file descriptor method will be used.

.. figure:: img/async.png
    :width: 347px
    :height: 379px

For further details on using the OpenSSL* asynchronous mode infrastructure please see the OpenSSL* online documentation located at:

    * `ASYNC_start_job <https://www.openssl.org/docs/manmaster/man3/ASYNC_start_job.html>`_
    * `ASYNC_WAIT_CTX_new <https://www.openssl.org/docs/manmaster/man3/ASYNC_WAIT_CTX_new.html>`_

.. _qat_2.0_qatengine_features_HKDF_support:

Intel® QAT OpenSSL* Engine HKDF Support
+++++++++++++++++++++++++++++++++++++++

The HKDF support in the Intel® QAT OpenSSL* Engine is available only from version 4.8 of Intel® QAT driver for 
Linux - Hardware Version 1.7. By default this support is disabled as it is added as an experimental feature. It can be enabled using 
the flag ``--enable-qat_hw_hkdf`` in the configure command combined with modifying the Intel® QAT driver file's 
config variable ``ServicesProfile`` from its default value of ``DEFAULT`` to ``CRYPTO``.

.. _qat_2.0_qatengine_features_pipelining_capability:

Using the OpenSSL* Pipelining Capability
++++++++++++++++++++++++++++++++++++++++

The OpenSSL* pipelining feature provides the capability to parallelise the processing for a single connection. For example a big 
buffer to be encrypted can be split into smaller chunks with each chunk encrypted simultaneously using pipelining. 
The Intel® QAT OpenSSL* Engine supports OpenSSL* pipelining capability for chained cipher encryption operations only. 
The engine provides a maximum of 32 pipelines (buffer chunks) with a maximum size of 16384 bytes for each pipeline. 
When pipelines are used, they are always accelerated to the hardware accelerator ignoring the small packet offload threshold. 
Please refer to the `OpenSSL* manual <https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_set_split_send_fragment.html>`_ for more information about pipelining.

.. _qat_2.0_qatengine_features_software_fallback_feature:

Intel® QAT OpenSSL* Engine Software Fallback Feature
++++++++++++++++++++++++++++++++++++++++++++++++++++

The *Intel® QAT Heartbeat* feature provides a mechanism for the Intel® QAT OpenSSL* Engine to detect unresponsive acceleration devices and to be 
notified of the start and end of any reset of the acceleration devices. The Heartbeat feature suspends all Intel QAT instances associated with that acceleration 
device between these two *reset-start* and *reset-end* events. An acceleration device can be configured for automatic reset by the Intel QAT framework upon 
heartbeat failure by using the ``AutomaticResetOnError = 1`` field in the ``[GENERAL]`` section of device configuration file ``/etc/<device>.conf``. 
The Intel® QAT OpenSSL* Engine's software fallback feature requires this field to be set.

The Intel® QAT OpenSSL* Engine's software fallback feature, when enabled by the user, essentially provides continuity of crypto operations for the 
application between the two above-mentioned *reset-start* and *reset-end* events. It does this by exhibiting the following behaviour:

    * Any requests that have already been submitted to the acceleration device that goes down but have not completed will be handled as on core requests and will complete.
    * Any new requests coming in while the acceleration device is offline will either be submitted to the other acceleration devices (if any are available) or if none are available then the request will be handled on core.
    * Once the acceleration device has come back online new requests will be able to use instances from that acceleration device again.

This should all happen in a transparent way with the only noticeable effects being a potential slow down in performance until the acceleration device comes back online.

Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. This Intel® QAT OpenSSL* Engine supports the Intel® QAT Heartbeat feature starting with Intel® QAT driver version 4.6 of the following device: `Intel® Xeon® with Intel® C62X Series Chipset <https://www.intel.com/content/www/us/en/design/products-and-solutions/processors-and-chipsets/purley/intel-xeon-scalable-processors.html>`_
#. Intel® QAT OpenSSL* Engine needs to be configured to disable Symmetric Chained Ciphers, PRF, HKDF and X25519/X448 acceleration by adding the following four flags in the configure command of Intel® QAT OpenSSL* Engine build: ``--disable-qat_hw_ciphers`` ``--disable-qat_hw_prf`` ``--disable-qat_hw_hkdf`` ``--disable-qat_hw_ecx``
#. The Intel® QAT Heartbeat feature is not supported in the FreeBSD operating system or in the qatlib RPM.

Additional Information
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Additional information on this Intel® QAT Heartbeat feature can be found in the :ref:`Heartbeat <qat_2.0_pg_infrastructure_heartbeat>` section of the Programmer's Guide.

Software Acceleration (QAT_SW)
-------------------------------------

.. _qat_2.0_qatengine_features_asymmetric_pke_aes-gcm:

Intel® QAT Software Acceleration for Asymmetric PKE and AES-GCM
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

This Intel® QAT OpenSSL* Engine supports multi-buffer based software acceleration for asymmetric PKE algorithms 
RSA, ECDH X25519, ECDH P-256/P-384 and ECDSA (sign) P-256/P-384 using the *Intel® Crypto Multi-buffer* library based 
on Intel® AVX-512 Integer Fused Multiply Add (IFMA) operations.

This support, when enabled by the user using the :ref:`build instructions <qat_2.0_qatengine_build_QAT_Engine>` for ``qat_sw`` target performs operation by 
batching up multiple requests maintained in queues and uses the OpenSSL asynchronous infrastructure to submit the 
batched requests up to 8 to Crypto Multi-buffer API which processes them in parallel using AVX-512 vector instructions. 
QAT_SW multi-buffer acceleration will be beneficial to use in asynchronous operations where there are many parallel connections.

Software based acceleration for AES-GCM is supported via the *Intel® Multi-Buffer Crypto for IPsec* Library. The implementation at 
engine for AES-GCM follows synchronous mechanism to submit requests to the *IPSec_MB* library which processes requests in multiple 
blocks using vectorized AES and AVX-512 instructions from the processor.

.. _qat_2.0_qatengine_features_co-existene_feature:

Hardware Acceleration and Software Acceleration Co-existence Feature
--------------------------------------------------------------------

Intel® QAT OpenSSL* Engine supports Hardware Acceleration (QAT_HW) and Software Acceleration (QAT_SW) co-existence build with both ``qat_hw`` and ``qat_sw`` dependant libraries 
(*Intel QAT driver*, *cryptom_mb* and *ipsec_mb*) linked in the ``qatengine.so`` library. This support can be enabled at build time when both 
Hardware Acceleration flag ``--with-qat_hw_dir=/path/to/QAT_Driver`` and Software Acceleration flag ``--enable-qat_sw`` configured together 
in the build configure option.


If the platform has support for both ``qat_hw`` and ``qat_sw``, the default behaviour is to accelerate asymmetric algorithms
and symmetric chained ciphers using QAT_HW and Symmetric GCM Ciphers using QAT_SW. If the platform doesn't
have ``qat_hw`` support then it will use QAT_SW for QAT_HW asymmetric algorithms that are supported in the 
Intel® QAT OpenSSL* Engine.

The default behaviour can be changed using corresponding algorithm's enable flags (eg: ``--enable-qat_sw_rsa``) in which case the individual 
algorithms enabled (either ``qat_hw`` or ``qat_sw``) in the build configure will get accelerated.

.. _qat_2.0_qatengine_features_openssl_3.0_support:

OpenSSL 3.0 Provider Support
-------------------------------------

Intel® QAT OpenSSL* Engine supports *Provider* interface for OpenSSL 3.0. The *qatprovider* support can be enabled using configure flag 
``--enable-qat_provider`` and the default if not specified will use engine interface.

.. table:: Supported Algorithms with OpenSSL 3.0 Provider Support

    +------------------------+------------------+
    | **Algorithms**         | **Supported by** |
    +========================+==================+
    | RSA                    | QAT_HW & QAT_SW  |
    +------------------------+------------------+
    | ECDSA                  | QAT_HW & QAT_SW  |
    +------------------------+------------------+
    | ECDH                   | QAT_HW & QAT_SW  |
    +------------------------+------------------+
    | ECX                    | QAT_HW & QAT_SW  |
    +------------------------+------------------+
    | AES-GCM                | QAT_HW & QAT_SW  |
    +------------------------+------------------+
    | DSA                    | QAT_HW           |
    +------------------------+------------------+
    | DH                     | QAT_HW           |
    +------------------------+------------------+
    | HKDF                   | QAT_HW           |
    +------------------------+------------------+
    | PRF                    | QAT_HW           |
    +------------------------+------------------+
    | AES128_CBC_HMAC_SHA1   | QAT_HW           |
    +------------------------+------------------+
    | AES256_CBC_HMAC_SHA1   | QAT_HW           |
    +------------------------+------------------+
    | AES128_CBC_HMAC_SHA256 | QAT_HW           |
    +------------------------+------------------+
    | AES256_CBC_HMAC_SHA256 | QAT_HW           |
    +------------------------+------------------+
    | SHA3-224               | QAT_HW           |
    +------------------------+------------------+
    | SHA3-256               | QAT_HW           |
    +------------------------+------------------+
    | SHA3-384               | QAT_HW           |
    +------------------------+------------------+
    | SHA3-512               | QAT_HW           |
    +------------------------+------------------+

This support is added as an experimental feature and tested with *OpenSSL speed* and *testapp* only and not tested with any application.

Example OpenSSL speed command to test using *qatprovider*:

* Hardware Acceleration (QAT_HW)

    .. code-block:: console

        ./openssl speed -provider qatprovider -elapsed -async_jobs 72 rsa2048
    
* Software Acceleration (QAT_SW)

    .. code-block:: console

        ./openssl speed -provider qatprovider -elapsed -async_jobs 8 rsa2048