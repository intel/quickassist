.. _qat_2.0_containers_run:

Run Containers using Intel速 QAT Acceleration
=============================================

.. note::
    If not running as *root* user, ``sudo`` will need to be added to the Linux* instructions below.

Intel速 QAT + OpenSSL* Container
-------------------------------

.. note::
    The commands below will run only the Intel速 QuickAssist Technology OpenSSL* Engine (QAT_Engine) portion of the image built in :ref:`previous section <qat_2.0_containers_build>`.

#. **Run** the image previously built in a container.

    .. code-block:: console
        
        docker run -it --cap-add=IPC_LOCK --security-opt seccomp=unconfined $(for i in `ls /dev/vfio/*`; do echo --device $i; done) intel/openssl-qat-engine:devel openssl engine -c -t -v qatengine

    You should see an output similar to the following:

    .. code-block:: text

        (qatengine) Reference implementation of QAT crypto engine(qat_hw & qat_sw) v0.6.12

        [RSA, DSA, DH, AES-128-CBC-HMAC-SHA1, AES-128-CBC-HMAC-SHA256, AES-256-
        CBC-HMAC-SHA1, AES-256-CBC-HMAC-SHA256, ChaCha20-Poly1305, id-aes128-GCM,
        id-aes192-GCM, id-aes256-GCM, SHA3-224, SHA3-256, SHA3-384, SHA3-512,
        TLS1-PRF, X25519, X448, SM2]

        [ available ]

        ENABLE_EXTERNAL_POLLING, POLL, SET_INSTANCE_FOR_THREAD,
        GET_NUM_OP_RETRIES, SET_MAX_RETRY_COUNT, SET_INTERNAL_POLL_INTERVAL,
        GET_EXTERNAL_POLLING_FD, ENABLE_EVENT_DRIVEN_POLLING_MODE,
        GET_NUM_CRYPTO_INSTANCES, DISABLE_EVENT_DRIVEN_POLLING_MODE,
        SET_EPOLL_TIMEOUT, SET_CRYPTO_SMALL_PACKET_OFFLOAD_THRESHOLD,
        ENABLE_INLINE_POLLING, ENABLE_HEURISTIC_POLLING,
        GET_NUM_REQUESTS_IN_FLIGHT, INIT_ENGINE, SET_CONFIGURATION_SECTION_NAME,
        ENABLE_SW_FALLBACK, HEARTBEAT_POLL, DISABLE_QAT_OFFLOAD

Intel速 QAT + NGINX* Container
-------------------------------------

#. **Create** a temporary directory.

    .. code-block:: console
        
        mkdir /tmp/nginx
        cd /tmp/nginx

#. **Set up** the SSL certificates:

    #. **Create** a file named *openssl.cnf*.

        .. code-block:: console
            
            vi openssl.cnf
    
    #. **Add** the following content to the file *openssl.cnf*:

        .. code-block:: text
            
            openssl_conf = openssl_init
            [ openssl_init ]
            engines = engine_section
            [ engine_section ]
            qat = qat_section
            [ qat_section ]
            engine_id = avx512
            default_algorithms = ALL

    #. **Create** the SSL certificates.

        .. code-block:: console

            openssl req -x509 -new -batch -nodes -subj '/CN=localhost' -keyout tls.key -out tls.pem

#. **Set up** the NGINX configuration file:

    #. **Create** a file named *nginx.conf*.

        .. code-block:: console

            vi nginx.conf
    
    #. **Add** the following content to the file *nginx.conf*:

        .. code-block:: text

            user root;
            worker_processes 8;

            load_module /usr/lib64/nginx/ngx_ssl_engine_qat_module.so;

            events {
                worker_connections  102400;
            }

            ssl_engine {
                use_engine qatengine;
                default_algorithms RSA;
                qat_engine {
                    qat_offload_mode async;
                    qat_notify_mode poll;
                    qat_poll_mode heuristic;
                    qat_shutting_down_release on;
                }
            }

            http {
                include       mime.types;
                default_type  application/octet-stream;

                keepalive_timeout 0;

                # HTTPS server
                server {
                    ssl_asynch on;
                    listen       443 ssl;
                    server_name  localhost;
                    ssl_certificate      /etc/ssl/certs/tls.crt;
                    ssl_certificate_key  /etc/ssl/certs/tls.key;
                    ssl_session_cache    off;
                    ssl_session_timeout  5m;
                    ssl_protocols  TLSv1.2;
                    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256;
                    ssl_ecdh_curve X25519;
                    ssl_prefer_server_ciphers   off;

                    location / {
                        root   html;
                        index  index.html index.htm;
                    }
                }

            }

#. **Run** the image previously built in a container.

    .. code-block:: console
        
        docker run --rm -it -p 9000:443 --cpuset-cpus 10-20 --security-opt seccomp=unconfined --security-opt apparmor=unconfined $(for i in `ls /dev/vfio/*`; do echo --device $i; done) -v "${PWD}"/tls.pem:/etc/ssl/certs/tls.crt -v "${PWD}"/tls.key:/etc/ssl/certs/tls.key -v "$PWD"/nginx.conf:/usr/share/nginx/conf/nginx.conf intel/openssl-qatengine:devel

#. *Within the running container*, **run** the NGINX server.

    .. code-block:: console

        nginx

#. *From the host*, **verify** the NGINX server is running.

    .. code-block:: console

        curl -k https://localhost:9000

    You should see an output similar to the following:

    .. code-block:: text

        <!DOCTYPE html>
        <html>
            <head>
                <title>Welcome to nginx!</title>
            </head>
            <body>
                <h1>Welcome to nginx!</h1>
                <p>If you see this page, the nginx web server is successfully
                installed and working. Further configuration is required.</p>
                <p>For online documentation and support please refer to
                <a href="http://nginx.org/">nginx.org</a>.<br/>
                Commercial support is available at
                <a href="http://nginx.com/">nginx.com</a>.</p>
                <p><em>Thank you for using nginx.</em></p>
            </body>
        </html>

Tuning Parameters
-----------------

Container Runtime Memory Lock Limit (optional)
+++++++++++++++++++++++++++++++++++++++++++++++

#. **Create** a systemd directory for the docker service.

    .. code-block:: console
        
        mkdir -p /etc/systemd/system/docker.service.d

#. **Navigate** to the docker service directory.

    .. code-block:: console
        
        cd /etc/systemd/system/docker.service.d

#. **Create** a file name *memlock.conf*.

    .. code-block:: console

        vi memlock.conf

#. **Add** the following variable to the *memlock.conf* file:

    .. code-block:: text

        [Service]
        LimitMEMLOCK=16777216

#. **Save** the file.

#. **Flush** the changes.

    .. code-block:: console

        sudo systemctl daemon-reload

#. **Restart** Docker.

    .. code-block:: console
    
        sudo systemctl restart docker